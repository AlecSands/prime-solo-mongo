## Create a collection named orders.
db.createCollection('orders')

## Insert at least 3 documents that represent an order.
## IMPORTANT: See section below for fields. Order dates should be:
## 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert({orderDate: new Date('2017-02-03')})
db.orders.insert({orderDate: new Date('2017-04-04')})
db.orders.insert({orderDate: new Date('2017-01-02')})

## Find all orders and make them look pretty.
db.orders.find().pretty()

## Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({orderDate: {$gt: new Date('2017-01-31')}})

## Change the orderTotal from 2/3/2017 to 63 dollars
## (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({orderDate: ISODate("2017-02-03T00:00:00Z")}, {$set: {orderTotal: 63}})

## Add another lineItem to the order from 4/4/2017
db.orders.update({orderDate: ISODate("2017-04-04T00:00:00Z")}, {$push: {lineItem: {productName: "Goo"}}})

## Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({orderDate: ISODate("2017-01-02T00:00:00Z")}, {$push: {lineItem: {productName: "Transistor Radio's", quantity: 2}}})

## Find orders with lineItems that have a quantity that is less than 10,
## but greater than 2. You will have to research $and
db.orders.find({$and: [{"lineItem.quantity": {$gte: 2}}, {"lineItem.quantity": {$lt:10}}]})
